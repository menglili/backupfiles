fmod ComputerState is
	protecting DataTypes .
	protecting Code .
	protecting Memory .
	protecting Stack .
	
	sort ComputerState .
	
	op state(_,_,_,_,_,_) : Stack Input Output Memory Code ProgramCounter -> ComputerState [ctor] .
	op GetStack(_) : ComputerState -> Stack .
	op GetInput(_) : ComputerState -> Input .
	op GetOutput(_) : ComputerState -> Output .
	op GetMemory(_) : ComputerState -> Memory .
	op GetCode(_) : ComputerState -> Code .
	op GetProgramCounter(_) : ComputerState -> ProgramCounter .
	op GetCurrentInstruction(_) : ComputerState -> Instruction .
	op IncrementCounter(_) : ComputerState -> ComputerState .
	
	var stack : Stack .
	var input : Input .
	var output : Output .
	var memory : Memory .
	var code : Code .
	var counter : ProgramCounter .
	
	eq GetStack(state(stack, input, output, memory, code, counter)) = stack .
	eq GetInput(state(stack, input, output, memory, code, counter)) = input .
	eq GetOutput(state(stack, input, output, memory, code, counter)) = output .
	eq GetMemory(state(stack, input, output, memory, code, counter)) = memory .
	eq GetCode(state(stack, input, output, memory, code, counter)) = code .
	eq GetProgramCounter(state(stack, input, output, memory, code, counter)) = counter .
	eq GetCurrentInstruction(state(stack, input, output, memory, code, counter)) = GetInstruction(code,counter) .
	eq IncrementCounter(state(stack, input, output, memory, code, counter)) = state(stack, input, output, memory, code, counter + 1) . 
	
endfm

fmod Computer is
	protecting ComputerState .
	
	op Step(_) : ComputerState -> ComputerState .
	op AllSteps(_) : ComputerState -> ComputerState .
	op RunProgram(_,_) : Code Input -> Output .
	op LoadCode(_,_) : Code Input -> ComputerState .
	op DoInstruction(_,_) : ComputerState Instruction -> ComputerState .	
		
	var st : ComputerState .
	var code : Code .
	var input : Input .
	var address : Address .
	var value : Value .
	var lab : Label .
	
	eq LoadCode(code,input) = state(empty,input, nil, init, code, 1) .  
	ceq AllSteps(st) = AllSteps(Step(st)) if GetCurrentInstruction(st) =/= InvalidProgramCounterError .
	ceq AllSteps(st) = st if GetCurrentInstruction(st) == InvalidProgramCounterError .
	eq RunProgram(code,input) = GetOutput(AllSteps(LoadCode(code,input))) .		
	eq Step(st) = IncrementCounter(DoInstruction(st,GetCurrentInstruction(st))) .		
	
	eq DoInstruction(st,TA address) = state(GetStack(st),address,GetInput(st),GetOutput(st),GetMemory(st),GetCode(st),GetProgramCounter(st)) .
	eq DoInstruction(st,TC value) =  state(GetStack(st),value,GetInput(st),GetOutput(st),GetMemory(st),GetCode(st),GetProgramCounter(st)) .
	eq DoInstruction(st,DR) = state(Pop(GetStack(st)),GetMemory(st)[Top(GetStack(st))],GetInput(st),GetOutput(st),GetMemory(st),GetCode(st),GetProgramCounter(st)) .
	eq DoInstruction(st,ST) = state(Pop(Pop(GetStack(st))),GetInput(st),GetOutput(st),GetMemory(st)[Top(Pop(GetStack(st))),Top(GetStack(st))],GetCode(st),GetProgramCounter(st)) .
	eq DoInstruction(st,AD) = state(Pop(Pop(GetStack(st))),Top(GetStack(st)) + Top(Pop(GetStack(st))),GetInput(st),GetOutput(st),GetMemory(st),GetCode(st),GetProgramCounter(st)) .
	eq DoInstruction(st,RD) = state(GetStack(st),head(GetInput(st)),tail(GetInput(st)),GetOutput(st),GetMemory(st),GetCode(st),GetProgramCounter(st)) .
	eq DoInstruction(st,WR) = state(Pop(GetStack(st)),GetInput(st),append(GetOutput(st),Top(GetStack(st))),GetMemory(st),GetCode(st),GetProgramCounter(st)) .
	eq DoInstruction(st,LAB lab) = st .
	eq DoInstruction(st,JU lab) = state(GetStack(st),GetInput(st),GetOutput(st),GetMemory(st),GetCode(st),FindLabel(GetCode(st),lab)) .
	ceq DoInstruction(st,JNZ lab) = st if Top(GetStack(st)) == 0 .
	ceq DoInstruction(st,JNZ lab) = DoInstruction(st,JU lab) if Top(GetStack(st)) =/= 0 .
	
endfm

reduce in Computer : RunProgram(RD ; RD ; AD ; WR,-5 -4) .