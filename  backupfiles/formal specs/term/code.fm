fmod Instruction is	
	protecting DataTypes .

	sort Instruction .
	
	op TA _ : Address -> Instruction [ctor] . 		--- pushes an address to the stack
	op TC _ : Value -> Instruction [ctor] . 		--- pushes a value to the stack
	op DR : -> Instruction [ctor] . 			--- dereferences the top of the stack, puts the result value on the stack
	op ST : -> Instruction [ctor] .				--- stores top of the stack to the address that is below the top
	op AD : -> Instruction [ctor] .				--- adds two values on the top of the stack, pushes the result on the stack
	op RD : -> Instruction [ctor] .				--- reads a value from the input and pushes it on the stack
	op WR : -> Instruction [ctor] .				--- takes a value from the stack and writes it to the output
	op LAB _ : Label -> Instruction [ctor] . 	--- declares a label
	op JU _ : Label -> Instruction [ctor] . 	--- jumps to given label
	op JNZ _ : Label -> Instruction [ctor] .	--- jumps to given label if there is non zero on top of the stack

	op InvalidProgramCounterError : -> Instruction [ctor].
endfm

fmod Code is 
	protecting Instruction .
	protecting DataTypes .
	sort Code .
	subsort Instruction < Code .
	
	op _;_ : Instruction Code -> Code [ctor].
	op GetInstruction(_,_) : Code ProgramCounter -> Instruction .
	op FindLabel(_,_) : Code Label -> ProgramCounter .
	
	var instruction : Instruction .
	var code : Code .
	var counter : ProgramCounter .
	vars lab : Label .
	
	eq GetInstruction(instruction,1) = instruction .
	ceq GetInstruction(instruction,counter) = InvalidProgramCounterError if counter > 1 .
	eq GetInstruction(instruction ; code,1) = instruction .
	ceq GetInstruction(instruction ; code,counter) = GetInstruction(code,counter - 1) if counter > 1 .
	eq FindLabel(LAB lab,lab) = 1 .
	eq FindLabel(LAB lab ; code,lab) = 1 .	
	ceq FindLabel(instruction ; code,lab) = 1 + FindLabel(code,lab) if instruction =/= LAB lab .
endfm