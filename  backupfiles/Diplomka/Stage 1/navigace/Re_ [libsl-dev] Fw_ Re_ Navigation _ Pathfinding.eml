Return-Path: <libsl-dev-bounces@openmv.org>
X-Original-To: v.rovensky@lit.cz
Delivered-To: v.rovensky@lit.cz
Received: from localhost (localhost.localdomain [127.0.0.1])
	by mail.bezdrat.net (Postfix) with ESMTP id 27AD8C03B
	for <v.rovensky@lit.cz>; Mon, 11 Jan 2010 07:32:46 +0100 (CET)
X-Virus-Scanned: amavisd-new at mail.bezdrat.net
Received: from mail.bezdrat.net ([127.0.0.1])
	by localhost (mail.bezdrat.net [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id O9eVTnxgo9mB for <v.rovensky@lit.cz>;
	Mon, 11 Jan 2010 07:32:45 +0100 (CET)
Received: from nimitz.openmetaverse.org (nimitz.openmetaverse.org [209.31.180.34])
	by mail.bezdrat.net (Postfix) with ESMTP id 56603C019
	for <v.rovensky@lit.cz>; Mon, 11 Jan 2010 07:32:44 +0100 (CET)
Received: from nimitz.openmetaverse.org (localhost [127.0.0.1])
	by nimitz.openmetaverse.org (Postfix) with ESMTP id 8EFB7BC49FE;
	Sun, 10 Jan 2010 22:32:41 -0800 (PST)
X-Original-To: libsl-dev@openmv.org
Delivered-To: libsl-dev@openmv.org
Received: from mail-fx0-f211.google.com (mail-fx0-f211.google.com
	[209.85.220.211])
	by nimitz.openmetaverse.org (Postfix) with ESMTP id ED05CBC498F
	for <libsl-dev@openmv.org>; Sun, 10 Jan 2010 22:32:38 -0800 (PST)
Received: by fxm3 with SMTP id 3so11009771fxm.24
	for <libsl-dev@openmv.org>; Sun, 10 Jan 2010 22:32:37 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=googlemail.com; s=gamma;
	h=domainkey-signature:mime-version:received:in-reply-to:references
	:date:message-id:subject:from:to:cc:content-type;
	bh=tx4GObhc9clnAtMQkEeFSYtUug4pR4bW1axc6wOzWng=;
	b=ptWLbAfYL/Pc2d8KZdMUDooxcrdZxtARJZxaFfxnHOag7Izb/J2ZKrs52D+KxKSzJZ
	qORf1pS1PJujrMem9bvAX1F+Yej1zMOb52SeWmHDZWQwigJwz8fBbdVNxHFN2ochAOy4
	MVsBKTtwYSNoYBHYfsNxG3XJEDkCtBN+/0KAQ=
DomainKey-Signature: a=rsa-sha1; c=nofws; d=googlemail.com; s=gamma;
	h=mime-version:in-reply-to:references:date:message-id:subject:from:to
	:cc:content-type;
	b=vzwwqtqsBR/2pHRY9PtIR03E2BMcs99HSeWEYXWyJ60kBqxvDAXYAWVQp5jwysvlTl
	KjXXipH8zjSUunMdAU/u08t5ZT6xo2PL09awAhGdsfL3WPs9VB7VOpqJUKaCZCGpikOi
	0XD46+WtDdlxNO5wnGi3ZVcOcQygSIamf4BiM=
MIME-Version: 1.0
Received: by 10.239.190.141 with SMTP id x13mr123074hbh.132.1263191557711; 
	Sun, 10 Jan 2010 22:32:37 -0800 (PST)
In-Reply-To: <187773.50533.qm@web63108.mail.re1.yahoo.com>
References: <187773.50533.qm@web63108.mail.re1.yahoo.com>
Date: Mon, 11 Jan 2010 06:32:37 +0000
Message-ID: <824c8ab71001102232t7fc5108bg10a135014681e360@mail.gmail.com>
From: Nexii Malthus <nexiim@googlemail.com>
To: Karen Palen <karen_palen@yahoo.com>
Cc: libsl-dev@openmv.org
Subject: Re: [libsl-dev] Fw: Re: Navigation / Pathfinding
X-BeenThere: libsl-dev@openmv.org
X-Mailman-Version: 2.1.11
Precedence: list
List-Id: libopenmetaverse development <libsl-dev.openmv.org>
List-Unsubscribe: <http://openmv.org/cgi-bin/mailman/options/libsl-dev>,
	<mailto:libsl-dev-request@openmv.org?subject=unsubscribe>
List-Archive: <http://openmv.org/pipermail/libsl-dev>
List-Post: <mailto:libsl-dev@openmv.org>
List-Help: <mailto:libsl-dev-request@openmv.org?subject=help>
List-Subscribe: <http://openmv.org/cgi-bin/mailman/listinfo/libsl-dev>,
	<mailto:libsl-dev-request@openmv.org?subject=subscribe>
Content-Type: multipart/mixed; boundary="===============1273307217=="
Mime-version: 1.0
Sender: libsl-dev-bounces@openmv.org
Errors-To: libsl-dev-bounces@openmv.org
X-Antivirus: AVG for E-mail 8.5.432 [270.14.133/2612]


--===============1273307217==
Content-Type: multipart/alternative; boundary=001485f5b1ec14a819047cddb49c


--001485f5b1ec14a819047cddb49c
Content-Type: text/plain; charset=ISO-8859-1

I'd try to suggest "Nagivation Spaces" pathfinding which is excellent for 3D
spaces like SL, but implementing the dynamic node creation is definitely no
trivial task :(

It really depends what you mean by 'best'. Navigation spaces would beat
anything if your looking for the best solution and quicker computation. If
you mean by best as in, easiest in short term, then you might want to try
Karen posted, that's a pretty cool way to handle the problem.

Rob's way of setting up a sim beforehand is good too, but only if you have
the ability to lay them down long-term without them disappearing and will
only work for that location, it might take a lot of waypoint prims to get
good grid going, but combined with navigation spaces it might actually be
pretty effective solution if you only have a single or few sims to deal with
and plenty of time setting up the nodes.

- Nexii

On Mon, Dec 21, 2009 at 7:36 PM, Karen Palen <karen_palen@yahoo.com> wrote:

> Forgot to include the group in this - sorry.
>
> --- On Mon, 12/21/09, Karen Palen <karen_palen@yahoo.com> wrote:
>
> > From: Karen Palen <karen_palen@yahoo.com>
> > Subject: Re: [libsl-dev] Navigation / Pathfinding
> > To: "V.Rovensky" <v.rovensky@lit.cz>
> > Date: Monday, December 21, 2009, 11:33 AM
> > I too am no expert at LSL scripting,
> > so I will have to leave the details of question 1 to others.
> > Right now my efforts are directed at adapting the OpenSim
> > test program PCampBot for avatars which requires C#. The
> > reason for doing it at the server level is that you use
> > dramatically fewer resources, especially communications
> > bandwidth.
> >
> > I would be delighted to hear about other efforts along
> > those lines and have a chance to collaborate.
> >
> > I have much more practical experience with question 2
> > though! I would suggest that you simply model the objects as
> > rectangles on the walking plane (or cubes if you are
> > flying).
> >
> > The practical results in object avoidance should be minimal
> > while the computing cost and complexity is dramatically
> > less!
> >
> > The only problems should be things like a huge U shaped
> > wall, say around a building. In this case you probably need
> > to have the capability to add this shape via a ".ini" file
> > of some sort.
> >
> > Even on OpenSim with its 256M prims though I am finding
> > that a simple cube for a wall/fence etc. is much easier to
> > handle and position correctly that a complex hollow shape.
> >
> > You will need to accept that every routing algorithm short
> > of a full blown Lee router and a few Terabytes of RAM will
> > have some sort of limitations.
> >
> > The trick is to find one that works within your constraints
> > well enough to do the job. That is where routing becomes
> > more "art" than "science" :-(
> >
> > I a situation like a PC board or chip layout the goal is
> > always to cram the most onto the board/chip possible so 90%
> > of the effort and compute resources are always directed at
> > the "last wire" problem.
> >
> > For an Avatar walking/flying across a Sim however you don't
> > need that level of efficiency and in fact a certain amount
> > of "wandering" in a complex maze would add realism.
> >
> > With an OpenSim/SL based system I would expect that a 256 X
> > 256 single byte array would work nicely, although this may
> > exceed some internal limits in LSL.
> >
> > Karen
> >
> > --- On Mon, 12/21/09, V.Rovensky <v.rovensky@lit.cz>
> > wrote:
> >
> > > From: V.Rovensky <v.rovensky@lit.cz>
> > > Subject: Re: [libsl-dev] Navigation / Pathfinding
> > > To: "Karen Palen" <karen_palen@yahoo.com>
> > > Date: Monday, December 21, 2009, 8:13 AM
> > > Hi, thank you for the quick response
> > > I've got some follow-up questions about what you
> > wrote,
> > > some quite dumb as I'm just starting with libSL, so
> > please
> > > bear with the newbie :o)
> > >
> > > Ad 1) Is there a way to do this programatically? I
> > havent
> > > found any means of attaching a LSL script to object
> > in
> > > libSL.
> > > Ad 2) Ok, what I'm probably going to do is create a
> > graph
> > > consisting of locations inbetween which there are no
> > > obstacles - to create such a graph I need information
> > about
> > > all the primitives in the Sim. I know how to get
> > primitives'
> > > locations, but how can I get the shapes (geometry)?
> > >
> > > Thanks for your time
> > > V.Rovensky
> > >
> > > ----- Original Message ----- From: "Karen Palen"
> > <karen_palen@yahoo.com>
> > > To: <v.rovensky@lit.cz>
> > > Sent: Sunday, December 20, 2009 10:25 PM
> > > Subject: Re: [libsl-dev] Navigation / Pathfinding
> > >
> > >
> > > > This really boils down to two questions:
> > > >
> > > > 1) Moving along a path to a predefined waypoint
> > > >
> > > > There is an LSL function llMoveToTarget which
> > does
> > > this for you and it is presently implemented in
> > OpenSim.
> > > Simply set one llMoveToTarget for each waypoint and
> > your
> > > object/avatar will follow that path. There is also an
> > event
> > > trigger for "got to target" BTW.
> > > >
> > > > 2) Avoiding obstacles in the way
> > > >
> > > > This is a MUCH harder problem which has yet to
> > have a
> > > general solution! Small obstacles (e.g. a post) can
> > simply
> > > be avoided by nudging the avatar randomly. More
> > difficult is
> > > a 'U' shaped object which can "trap" the avatar.
> > > >
> > > > The general case of a maze is a very compute
> > intensive
> > > operation - see http://en.wikipedia.org/wiki/Lee_algorithm (original
> > > reference published in 1961!). This is one of the
> > > fundamental problems of automated design of
> > electronic
> > > circuits.
> > > >
> > > > Hope this helps.
> > > >
> > > > Karen
> > > > --- On Sun, 12/20/09, v.rovensky@lit.cz
> > > <v.rovensky@lit.cz>
> > > wrote:
> > > >
> > > >> From: v.rovensky@lit.cz
> > > <v.rovensky@lit.cz>
> > > >> Subject: [libsl-dev] Navigation /
> > Pathfinding
> > > >> To: libsl-dev@openmv.org
> > > >> Date: Sunday, December 20, 2009, 11:57 AM
> > > >> Hi everyone
> > > >>
> > > >> I went through the documentation and mailing
> > lists
> > > trying
> > > >> to find the best way
> > > >> to make my avatar move between locations and
> > > evade
> > > >> obstacles, but I still can't
> > > >> get it right - could someone please throw
> > some
> > > ideas at me
> > > >> about how I could
> > > >> implement pathfinding / navigation? Say I
> > have two
> > > points A
> > > >> and B, how could I
> > > >> make the avatar get from one to another
> > while
> > > avoiding any
> > > >> obstacles? The more
> > > >> reliable the better.
> > > >> Ideally, I'd like to somehow construct a set
> > of
> > > "waypoints"
> > > >> from from the Sim's
> > > >> geometry, create a graph based on
> > accessibility
> > > between
> > > >> them and perform
> > > >> something like A* on it. Could this be done?
> > Is
> > > there even
> > > >> a way to access the
> > > >> Sim's entire geometry (like the primitives'
> > shapes
> > > and
> > > >> sizes)?
> > > >> Any thoughts/hints are welcome
> > > >>
> > > >> Thanks for all your time
> > > >> V.Rovensky
> > > >>
> > > >>
> > > >>
> > _______________________________________________
> > > >> libsl-dev mailing list
> > > >> libsl-dev@openmv.org
> > > >> http://openmv.org/cgi-bin/mailman/listinfo/libsl-dev
> > > >>
> > > >
> > > >
> > > >
> > >
> > >
> >
> >
> >
> >
>
>
>
> _______________________________________________
> libsl-dev mailing list
> libsl-dev@openmv.org
> http://openmv.org/cgi-bin/mailman/listinfo/libsl-dev
>

--001485f5b1ec14a819047cddb49c
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I&#39;d try to suggest &quot;Nagivation Spaces&quot; pathfinding which is e=
xcellent for 3D spaces like SL, but implementing the dynamic node creation =
is definitely no trivial task :(<div><br></div><div>It really depends what =
you mean by &#39;best&#39;. Navigation spaces would beat anything if your l=
ooking for the best solution and quicker computation. If you mean by best a=
s in, easiest in short term, then you might want to try Karen posted, that&=
#39;s a pretty cool way to handle the problem.</div>
<div><br></div><div>Rob&#39;s way of setting up a sim beforehand is good to=
o, but only if you have the ability to lay them down long-term without them=
 disappearing and will only work for that location, it might take a lot of =
waypoint prims to get good grid going, but combined with navigation spaces =
it might actually be pretty effective solution if you only have a single or=
 few sims to deal with and plenty of time setting up the nodes.</div>
<div><br></div><div>- Nexii<br><br><div class=3D"gmail_quote">On Mon, Dec 2=
1, 2009 at 7:36 PM, Karen Palen <span dir=3D"ltr">&lt;<a href=3D"mailto:kar=
en_palen@yahoo.com">karen_palen@yahoo.com</a>&gt;</span> wrote:<br><blockqu=
ote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc s=
olid;padding-left:1ex;">
Forgot to include the group in this - sorry.<br>
<br>
--- On Mon, 12/21/09, Karen Palen &lt;<a href=3D"mailto:karen_palen@yahoo.c=
om">karen_palen@yahoo.com</a>&gt; wrote:<br>
<br>
&gt; From: Karen Palen &lt;<a href=3D"mailto:karen_palen@yahoo.com">karen_p=
alen@yahoo.com</a>&gt;<br>
&gt; Subject: Re: [libsl-dev] Navigation / Pathfinding<br>
&gt; To: &quot;V.Rovensky&quot; &lt;<a href=3D"mailto:v.rovensky@lit.cz">v.=
rovensky@lit.cz</a>&gt;<br>
&gt; Date: Monday, December 21, 2009, 11:33 AM<br>
&gt; I too am no expert at LSL scripting,<br>
&gt; so I will have to leave the details of question 1 to others.<br>
&gt; Right now my efforts are directed at adapting the OpenSim<br>
&gt; test program PCampBot for avatars which requires C#. The<br>
&gt; reason for doing it at the server level is that you use<br>
&gt; dramatically fewer resources, especially communications<br>
&gt; bandwidth.<br>
&gt;<br>
&gt; I would be delighted to hear about other efforts along<br>
&gt; those lines and have a chance to collaborate.<br>
&gt;<br>
&gt; I have much more practical experience with question 2<br>
&gt; though! I would suggest that you simply model the objects as<br>
&gt; rectangles on the walking plane (or cubes if you are<br>
&gt; flying).<br>
&gt;<br>
&gt; The practical results in object avoidance should be minimal<br>
&gt; while the computing cost and complexity is dramatically<br>
&gt; less!<br>
&gt;<br>
&gt; The only problems should be things like a huge U shaped<br>
&gt; wall, say around a building. In this case you probably need<br>
&gt; to have the capability to add this shape via a &quot;.ini&quot; file<b=
r>
&gt; of some sort.<br>
&gt;<br>
&gt; Even on OpenSim with its 256M prims though I am finding<br>
&gt; that a simple cube for a wall/fence etc. is much easier to<br>
&gt; handle and position correctly that a complex hollow shape.<br>
&gt;<br>
&gt; You will need to accept that every routing algorithm short<br>
&gt; of a full blown Lee router and a few Terabytes of RAM will<br>
&gt; have some sort of limitations.<br>
&gt;<br>
&gt; The trick is to find one that works within your constraints<br>
&gt; well enough to do the job. That is where routing becomes<br>
&gt; more &quot;art&quot; than &quot;science&quot; :-(<br>
&gt;<br>
&gt; I a situation like a PC board or chip layout the goal is<br>
&gt; always to cram the most onto the board/chip possible so 90%<br>
&gt; of the effort and compute resources are always directed at<br>
&gt; the &quot;last wire&quot; problem.<br>
&gt;<br>
&gt; For an Avatar walking/flying across a Sim however you don&#39;t<br>
&gt; need that level of efficiency and in fact a certain amount<br>
&gt; of &quot;wandering&quot; in a complex maze would add realism.<br>
&gt;<br>
&gt; With an OpenSim/SL based system I would expect that a 256 X<br>
&gt; 256 single byte array would work nicely, although this may<br>
&gt; exceed some internal limits in LSL.<br>
&gt;<br>
&gt; Karen<br>
&gt;<br>
&gt; --- On Mon, 12/21/09, V.Rovensky &lt;<a href=3D"mailto:v.rovensky@lit.=
cz">v.rovensky@lit.cz</a>&gt;<br>
&gt; wrote:<br>
&gt;<br>
&gt; &gt; From: V.Rovensky &lt;<a href=3D"mailto:v.rovensky@lit.cz">v.roven=
sky@lit.cz</a>&gt;<br>
&gt; &gt; Subject: Re: [libsl-dev] Navigation / Pathfinding<br>
&gt; &gt; To: &quot;Karen Palen&quot; &lt;<a href=3D"mailto:karen_palen@yah=
oo.com">karen_palen@yahoo.com</a>&gt;<br>
&gt; &gt; Date: Monday, December 21, 2009, 8:13 AM<br>
&gt; &gt; Hi, thank you for the quick response<br>
&gt; &gt; I&#39;ve got some follow-up questions about what you<br>
&gt; wrote,<br>
&gt; &gt; some quite dumb as I&#39;m just starting with libSL, so<br>
&gt; please<br>
&gt; &gt; bear with the newbie :o)<br>
&gt; &gt;<br>
&gt; &gt; Ad 1) Is there a way to do this programatically? I<br>
&gt; havent<br>
&gt; &gt; found any means of attaching a LSL script to object<br>
&gt; in<br>
&gt; &gt; libSL.<br>
&gt; &gt; Ad 2) Ok, what I&#39;m probably going to do is create a<br>
&gt; graph<br>
&gt; &gt; consisting of locations inbetween which there are no<br>
&gt; &gt; obstacles - to create such a graph I need information<br>
&gt; about<br>
&gt; &gt; all the primitives in the Sim. I know how to get<br>
&gt; primitives&#39;<br>
&gt; &gt; locations, but how can I get the shapes (geometry)?<br>
&gt; &gt;<br>
&gt; &gt; Thanks for your time<br>
&gt; &gt; V.Rovensky<br>
&gt; &gt;<br>
&gt; &gt; ----- Original Message ----- From: &quot;Karen Palen&quot;<br>
&gt; &lt;<a href=3D"mailto:karen_palen@yahoo.com">karen_palen@yahoo.com</a>=
&gt;<br>
&gt; &gt; To: &lt;<a href=3D"mailto:v.rovensky@lit.cz">v.rovensky@lit.cz</a=
>&gt;<br>
&gt; &gt; Sent: Sunday, December 20, 2009 10:25 PM<br>
&gt; &gt; Subject: Re: [libsl-dev] Navigation / Pathfinding<br>
&gt; &gt;<br>
&gt; &gt;<br>
&gt; &gt; &gt; This really boils down to two questions:<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; 1) Moving along a path to a predefined waypoint<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; There is an LSL function llMoveToTarget which<br>
&gt; does<br>
&gt; &gt; this for you and it is presently implemented in<br>
&gt; OpenSim.<br>
&gt; &gt; Simply set one llMoveToTarget for each waypoint and<br>
&gt; your<br>
&gt; &gt; object/avatar will follow that path. There is also an<br>
&gt; event<br>
&gt; &gt; trigger for &quot;got to target&quot; BTW.<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; 2) Avoiding obstacles in the way<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; This is a MUCH harder problem which has yet to<br>
&gt; have a<br>
&gt; &gt; general solution! Small obstacles (e.g. a post) can<br>
&gt; simply<br>
&gt; &gt; be avoided by nudging the avatar randomly. More<br>
&gt; difficult is<br>
&gt; &gt; a &#39;U&#39; shaped object which can &quot;trap&quot; the avatar=
.<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; The general case of a maze is a very compute<br>
&gt; intensive<br>
&gt; &gt; operation - see <a href=3D"http://en.wikipedia.org/wiki/Lee_algor=
ithm" target=3D"_blank">http://en.wikipedia.org/wiki/Lee_algorithm</a> (ori=
ginal<br>
&gt; &gt; reference published in 1961!). This is one of the<br>
&gt; &gt; fundamental problems of automated design of<br>
&gt; electronic<br>
&gt; &gt; circuits.<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; Hope this helps.<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt; Karen<br>
&gt; &gt; &gt; --- On Sun, 12/20/09, <a href=3D"mailto:v.rovensky@lit.cz">v=
.rovensky@lit.cz</a><br>
<div class=3D"im">&gt; &gt; &lt;<a href=3D"mailto:v.rovensky@lit.cz">v.rove=
nsky@lit.cz</a>&gt;<br>
&gt; &gt; wrote:<br>
&gt; &gt; &gt;<br>
</div>&gt; &gt; &gt;&gt; From: <a href=3D"mailto:v.rovensky@lit.cz">v.roven=
sky@lit.cz</a><br>
&gt; &gt; &lt;<a href=3D"mailto:v.rovensky@lit.cz">v.rovensky@lit.cz</a>&gt=
;<br>
&gt; &gt; &gt;&gt; Subject: [libsl-dev] Navigation /<br>
&gt; Pathfinding<br>
&gt; &gt; &gt;&gt; To: <a href=3D"mailto:libsl-dev@openmv.org">libsl-dev@op=
enmv.org</a><br>
&gt; &gt; &gt;&gt; Date: Sunday, December 20, 2009, 11:57 AM<br>
<div><div></div><div class=3D"h5">&gt; &gt; &gt;&gt; Hi everyone<br>
&gt; &gt; &gt;&gt;<br>
&gt; &gt; &gt;&gt; I went through the documentation and mailing<br>
&gt; lists<br>
&gt; &gt; trying<br>
&gt; &gt; &gt;&gt; to find the best way<br>
&gt; &gt; &gt;&gt; to make my avatar move between locations and<br>
&gt; &gt; evade<br>
&gt; &gt; &gt;&gt; obstacles, but I still can&#39;t<br>
&gt; &gt; &gt;&gt; get it right - could someone please throw<br>
&gt; some<br>
&gt; &gt; ideas at me<br>
&gt; &gt; &gt;&gt; about how I could<br>
&gt; &gt; &gt;&gt; implement pathfinding / navigation? Say I<br>
&gt; have two<br>
&gt; &gt; points A<br>
&gt; &gt; &gt;&gt; and B, how could I<br>
&gt; &gt; &gt;&gt; make the avatar get from one to another<br>
&gt; while<br>
&gt; &gt; avoiding any<br>
&gt; &gt; &gt;&gt; obstacles? The more<br>
&gt; &gt; &gt;&gt; reliable the better.<br>
&gt; &gt; &gt;&gt; Ideally, I&#39;d like to somehow construct a set<br>
&gt; of<br>
&gt; &gt; &quot;waypoints&quot;<br>
&gt; &gt; &gt;&gt; from from the Sim&#39;s<br>
&gt; &gt; &gt;&gt; geometry, create a graph based on<br>
&gt; accessibility<br>
&gt; &gt; between<br>
&gt; &gt; &gt;&gt; them and perform<br>
&gt; &gt; &gt;&gt; something like A* on it. Could this be done?<br>
&gt; Is<br>
&gt; &gt; there even<br>
&gt; &gt; &gt;&gt; a way to access the<br>
&gt; &gt; &gt;&gt; Sim&#39;s entire geometry (like the primitives&#39;<br>
&gt; shapes<br>
&gt; &gt; and<br>
&gt; &gt; &gt;&gt; sizes)?<br>
&gt; &gt; &gt;&gt; Any thoughts/hints are welcome<br>
&gt; &gt; &gt;&gt;<br>
&gt; &gt; &gt;&gt; Thanks for all your time<br>
&gt; &gt; &gt;&gt; V.Rovensky<br>
&gt; &gt; &gt;&gt;<br>
&gt; &gt; &gt;&gt;<br>
&gt; &gt; &gt;&gt;<br>
&gt; _______________________________________________<br>
&gt; &gt; &gt;&gt; libsl-dev mailing list<br>
&gt; &gt; &gt;&gt; <a href=3D"mailto:libsl-dev@openmv.org">libsl-dev@openmv=
.org</a><br>
&gt; &gt; &gt;&gt; <a href=3D"http://openmv.org/cgi-bin/mailman/listinfo/li=
bsl-dev" target=3D"_blank">http://openmv.org/cgi-bin/mailman/listinfo/libsl=
-dev</a><br>
&gt; &gt; &gt;&gt;<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt;<br>
&gt; &gt; &gt;<br>
&gt; &gt;<br>
&gt; &gt;<br>
&gt;<br>
&gt;<br>
&gt; =A0 =A0 =A0<br>
&gt;<br>
<br>
<br>
<br>
_______________________________________________<br>
libsl-dev mailing list<br>
<a href=3D"mailto:libsl-dev@openmv.org">libsl-dev@openmv.org</a><br>
<a href=3D"http://openmv.org/cgi-bin/mailman/listinfo/libsl-dev" target=3D"=
_blank">http://openmv.org/cgi-bin/mailman/listinfo/libsl-dev</a><br>
</div></div></blockquote></div><br></div>

--001485f5b1ec14a819047cddb49c--

--===============1273307217==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
libsl-dev mailing list
libsl-dev@openmv.org
http://openmv.org/cgi-bin/mailman/listinfo/libsl-dev

--===============1273307217==
Content-Type: multipart/alternative; 
	boundary="=======AVGMAIL-5F800831======="

--=======AVGMAIL-5F800831=======
Content-Type: text/plain; x-avg=cert; charset=us-ascii
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Content-Description: "AVG certification"


No virus found in this incoming message.
Checked by AVG - www.avg.com 
Version: 8.5.432 / Virus Database: 270.14.133/2612 - Release Date: 01/10/10 =
19:35:00

--=======AVGMAIL-5F800831=======--
--===============1273307217==--
